> この完成しているviewer.pyの仕様書を作成してください

✦ 承知いたしました。viewer.py の仕様書を作成します。

  ---

  viewer.py アプリケーション仕様書

  1. 概要


  このアプリケーションは、7つのグループが36週間で一巡する交代制シフト表
  を基に、個人の月間シフトカレンダーをWebブラウザ上で表示するツールです
  。ユーザーは基準日、担当グループ、表示したい年月、および使用するシフト
  データCSVファイルを選択・設定でき、設定は保存されます。また、印刷時にA
  4用紙1枚に収まるようにレイアウトが最適化されています。

  2. 機能詳細

  ##### 2.1. シフトデータの読み込みと準備 (load_and_prepare_data 関数)


   * 指定されたCSVファイルからシフトデータを読み込みます。
   * CSVデータはヘッダーなしで、最初の列が「週」、続く7列が「イ」から「ト
     」までのグループの勤務内容であると仮定します。
   * 読み込んだデータに列名を付与し、「週」をインデックスとして設定し、週
     番号でソートします。
   * ファイルが見つからない場合はエラーメッセージを表示します。

  ##### 2.2. シフトデータの平坦化 (flatten_shift_data 関数)

   * 読み込んだシフトデータを、週とグループの順序に従って1次元のリストに平
     坦化します。
   * これにより、日付からの勤務計算が容易になります。


  ##### 2.3. 日付ごとの勤務計算ロジック (get_daily_kinmu 関数)


   * 指定された日付、基準日、基準シフトインデックス（平坦化されたリスト内
     での開始位置）、および平坦化されたシフトリストを基に、その日の勤務内
     容、対応するシフト表の週番号、および担当グループを計算して返します。
   * 36週サイクルと7グループのローテーションを考慮して、正確な勤務を特定し
     ます。

  ##### 2.4. カレンダー表示 (create_calendar_html 関数)


   * 指定された年と月のカレンダーをHTML形式で動的に生成します。
   * 各日付セルには、日付番号、対応するシフト表の週番号、担当グループ、お
     よび勤務内容が表示されます。
   * 視覚的要素:
       * 土曜日には薄い水色 (#f0f8ff)、日曜日には薄いピンク色 (#ffe0e6)
         の背景色が適用されます。
       * 勤務内容に応じて色分けされます:
           * 「公」または「休」: 赤色
           * 「泊」を含む勤務: 青色
           * 「明」を含む勤務: 緑色
           * 上記以外: 黒色
   * カレンダーのスタイルはCSSで定義され、Streamlitの
     st.markdown(unsafe_allow_html=True) を使用して表示されます。

  ##### 2.5. ユーザー設定の管理


   * 設定項目:
       * selected_csv: 使用するシフトデータCSVファイルのパス。
       * ref_date: シフト表の基準日（Week 1の開始日）。
       * ref_week: 基準日のシフト表上の週番号（1-36）。
       * ref_group: 基準日の担当グループ（「イ」〜「ト」）。
   * 保存と読み込み:
       * 設定は settings.json ファイルにJSON形式で保存されます。
       * アプリケーション起動時に settings.json
         が存在すれば、その設定を自動的に読み込みます。
       * 設定ファイルが存在しない場合や、ユーザーが「この設定を保存」ボタ
         ンをクリックした場合、現在の設定がファイルに書き込まれます。
   * UI:
       * サイドバーに設定入力ウィジェット（日付ピッカー、数値入力、セレク
         トボックス）が配置されます。
       * プログラムフォルダ内の利用可能なCSVファイルが自動的にリストアップ
         され、選択できます。

  ##### 2.6. 印刷時のレイアウト最適化


   * @media print
     CSSクエリを使用して、印刷時のみ適用されるスタイルを定義します。
   * 最適化内容:
       * サイドバーを非表示にします。
       * メインコンテンツの幅を100%にし、パディングとマージンをゼロにしま
         す。
       * タイトル (h1) とサブヘッダー (h2)
         のフォントサイズを小さくし、マージンをゼロにします。
       * カレンダーテーブル全体のフォントサイズ、セルの高さ、パディングを
         調整し、A4用紙1枚に収まるように最適化します。

  3. ファイル構成



   1 shift_schedule_v1_piAPP/
   2 ├── viewer.py             # アプリケーションのメインコード
   3 ├── settings.json         # ユーザー設定を保存するファイル 
     (アプリケーションが自動生成)
   4 ├── shift_data_36w_2025-05-16.csv # シフトデータCSVファイル 
     (ユーザーが配置)
   5 └── (その他のCSVファイル) # 
     ユーザーが配置する可能性のある他のシフトデータCSVファイル


  4. 使用ライブラリ


   * streamlit
   * pandas
   * datetime (Python標準ライブラリ)
   * calendar (Python標準ライブラリ)
   * json (Python標準ライブラリ)
   * os (Python標準ライブラリ)

  5. 実行方法

   1. 必要なライブラリをインストールします（仮想環境の使用を推奨）：


   1     pip install streamlit pandas

   2. viewer.py
      ファイルを、シフトデータCSVファイルと同じディレクトリに配置します。        
   3. ターミナルまたはコマンドプロンプトで、viewer.py
      があるディレクトリに移動し、以下のコマンドを実行します：


   1     streamlit run viewer.py

   4. Webブラウザが自動的に開き、アプリケーションが表示されます。

  6. settings.json の構造

  settings.json は、以下のようなJSON形式でユーザー設定を保存します。



   1 {
   2     "selected_csv": "shift_data_36w_2025-05-16.csv",
   3     "ref_date": "2025-07-14",
   4     "ref_week": 9,
   5     "ref_group": "ハ"
   6 }



   * selected_csv: 最後に選択されたCSVファイル名。
   * ref_date: 基準日（YYYY-MM-DD形式の文字列）。
   * ref_week: 基準日の週番号（整数、1-36）。
   * ref_group: 基準日の担当グループ（文字列、「イ」「ロ」など）。

  7. CSVデータ形式

  アプリケーションは、以下の形式のCSVデータを期待します。


   * ヘッダー行なし。
   * 各行はカンマ区切り。
   * 最初の列は週番号（1-36）。
   * 続く7列は、それぞれ「イ」「ロ」「ハ」「ニ」「ホ」「ヘ」「ト」グループ
     の勤務内容。

  例:


   1 1,215,B 545/546(土休),160,泊172,明113,休,公
   2 19,B 533/534(土休),20,F-35,泊174,明117,休,公
   3 ...


> viewer.pyの起動方法

✦ viewer.py の起動方法は以下の通りです。


   1. 必要なライブラリのインストール:
      まだインストールしていない場合は、ターミナル（またはコマンドプロン
  プト）で以下のコマンドを実行してください。

   1     pip install streamlit pandas


   2. アプリケーションの起動:
      viewer.py
  ファイルがあるディレクトリに移動し、以下のコマンドを実行してください。


   1     streamlit run viewer.py



  このコマンドを実行すると、自動的にWebブラウザが開き、アプリケーション
  が表示されます。

Using 1 GEMINI.md file